###########################################################################
# Upstream Definitions - Point to Docker containers
###########################################################################

upstream unpackerr {
    server 127.0.0.1:5656;
}

# Heimdall (Dashboard) - Direct connection (not via Gluetun)
upstream heimdall {
    server 127.0.0.1:2080;
}

# All services below route through Gluetun container
upstream jellyfin {
    server 127.0.0.1:8096;
}

upstream jellyseerr {
    server 127.0.0.1:5055;
}

upstream radarr {
    server 127.0.0.1:7878;
}

upstream sonarr {
    server 127.0.0.1:8989;
}

upstream lidarr {
    server 127.0.0.1:8686;
}

upstream readarr {
    server 127.0.0.1:8787;
}

upstream prowlarr {
    server 127.0.0.1:9696;
}

upstream bazarr {
    server 127.0.0.1:6767;
}

upstream qbittorrent {
    server 127.0.0.1:8200;
}

upstream sabnzbd {
    server 127.0.0.1:8100;
}

upstream mylar {
    server 127.0.0.1:8090;
}

upstream whisparr {
    server 127.0.0.1:6969;
}

upstream filebot {
    server 127.0.0.1:5454;
}

upstream huntarr {
    server 127.0.0.1:9705;
}

###########################################################################
# Server Blocks - Only accessible via WireGuard VPN (10.8.0.0/24)
###########################################################################

# Catch all HTTP requests on port 80
server {
    listen 10.8.0.1:80 default_server;
    listen [::]:80;
    server_name -;
    return 444;  # closes connection
}

# Catch all HTTPS requests on port 443
server {
    listen 10.8.0.1:443 ssl default_server;
    listen [::]:443 ssl;
    server_name -;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    return 444;
}

# Heimdall Dashboard (Default/Main)
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name media.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name media.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://heimdall;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_ssl_verify off;
    }
}

# Jellyfin Media Server
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name jellyfin.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name jellyfin.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    client_max_body_size 20M;

    location / {
        proxy_pass http://jellyfin;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Disable buffering for streaming
        proxy_buffering off;

        # WebSocket support for live updates
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Socket.io for Jellyfin web client
    location /socket.io/ {
        proxy_pass http://jellyfin;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

# Jellyseerr Request Manager
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name jellyseerr.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name jellyseerr.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    proxy_set_header Referer $http_referer;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Real-Port $remote_port;
    proxy_set_header X-Forwarded-Host $host:$remote_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-Port $remote_port;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Ssl on;

    location / {
        proxy_pass http://jellyseerr;
    }
}

# Radarr Movies
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name radarr.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name radarr.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://radarr;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # SignalR WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
    }
}

# Sonarr TV Shows
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name sonarr.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name sonarr.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://sonarr;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # SignalR WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
    }
}

# Lidarr Music
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name lidarr.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name lidarr.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://lidarr;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # SignalR WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
    }
}

# Readarr Books
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name readarr.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name readarr.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://readarr;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # SignalR WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
    }
}

# Prowlarr Indexers
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name prowlarr.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name prowlarr.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://prowlarr;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # SignalR WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
    }
}

# Bazarr Subtitles
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name bazarr.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name bazarr.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://bazarr;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# qBittorrent Torrent Client
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name qbittorrent.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name qbittorrent.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://qbittorrent;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# SABnzbd Usenet Client
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name sabnzbd.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name sabnzbd.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://sabnzbd;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Mylar3 Comics
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name mylar.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name mylar.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://mylar;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Whisparr (Optional - Adult Content)
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name whisparr.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name whisparr.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://whisparr;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # SignalR WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
    }
}

# Unpacker
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name unpackerr.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name unpackerr.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://unpackerr;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support if needed
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

# FileBot
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name filebot.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name filebot.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://filebot;
	proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Huntarr
server {
    listen 10.8.0.1:80;
    listen [::]:80;
    server_name huntarr.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 10.8.0.1:443 ssl;
    listen [::]:443 ssl;

    server_name huntarr.local;

    ssl_certificate /etc/nginx/ssl/mediastack.crt;
    ssl_certificate_key /etc/nginx/ssl/mediastack.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://huntarr;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}